{"version":3,"sources":["utils/formValidations.js","components/InputField.jsx","components/Form.jsx","views/Home.jsx","components/App.js","reportWebVitals.js","index.js"],"names":["regex","email","RegExp","Validators","value","message","toString","trim","length","error","test","InputField","type","name","id","label","onChange","validators","useState","setError","setValue","handleChange","event","target","i","check","validateInput","className","required","htmlFor","defaultProps","Form","values","setValues","action","onSubmit","preventDefault","noValidate","LastName","EmailAddress","Password","href","Home","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec520878.chunk.js","sourcesContent":["const regex = {\n  email: new RegExp(\n    '^(([^<>()\\\\[\\\\]\\\\\\\\.,;:\\\\s@]+(\\\\.[^<>()\\\\[\\\\]\\\\\\\\.,;:\\\\s@]+)*)|(.+))@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}])|(([a-zA-Z\\\\-0-9]+\\\\.)+[a-zA-Z]{2,}))$',\n  )\n};\n\nexport class Validators {\n  static required(value, message) {\n    if (!value || !value.toString().trim().length) {\n      return { error: true, message };\n    }\n    return false;\n  }\n\n  static email(value, message) {\n    if (value) {\n      const result = regex.email.test(value)\n      if (!result)\n        return { error: true, message }\n    }\n  }\n}\n\nexport const validateInput = (validators, value, id) => {\n  if (validators && validators.length) {\n    for (let i = 0; i < validators.length; i++) {\n      const error = validators[i].check(value, validators[i].message);\n      if (error) {\n        return error;\n      }\n    }\n  }\n  return false;\n};\n\n","import { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { validateInput } from '../utils/formValidations'\n\nconst InputField = ({ type, name, id, label, onChange, validators }) => {\n  const [error, setError] = useState(false)\n  const [value, setValue] = useState()\n\n  const handleChange = (event) => {\n    const { name, value, id } = event.target\n    setValue(value)\n    setError(validateInput(validators, value, id))\n    onChange(name, value)\n    // console.log(id)\n  }\n\n  return (\n    <div className=\"form-group\">\n      <input type={ type } name={ name } id={ id } className=\"input\" onChange={ event => handleChange(event) } value={ value } required />\n      <label htmlFor={ name } className=\"label\">{ label }</label>\n      { error && <i className=\"icon-error\"></i> }\n      { error && <span className=\"errorMessage\">{ error.message }</span> }\n    </div>\n  )\n}\n\nInputField.propTypes = {\n  // value: PropTypes.string,\n  name: PropTypes.string,\n  label: PropTypes.string,\n  validators: PropTypes.array,\n  type: PropTypes.string,\n  onChange: PropTypes.func.isRequired\n}\n\nInputField.defaultProps = {\n  // value: '',\n  name: '',\n  label: '',\n  type: 'text',\n  validators: []\n};\n\nexport default InputField","import { useState } from 'react'\nimport InputField from './InputField'\nimport { Validators } from '../utils/formValidations'\n\nconst Form = () => {\n  const [values, setValues] = useState({})\n\n  const handleChange = (name, value) => {\n    // setValues({ ...values, [e.target.name]: e.target.value })\n    setValues({ ...values, [name]: value })\n    // console.log(name, value)\n  }\n\n  return (\n    <form action=\"\" className=\"form\" onSubmit={ (event) => {\n      event.preventDefault()\n      // console.log(formEl)\n    } } noValidate>\n      <InputField\n        type=\"text\"\n        id=\"FirstName\"\n        name=\"First Name\"\n        label=\"First Name\"\n        onChange={ handleChange }\n        validators={ [\n          { check: Validators.required, message: \"First Name cannot be empty.\" }\n        ] }\n      />\n      <InputField\n        type=\"text\"\n        id=\"LastName\"\n        name=\"Last Name\"\n        label=\"Last Name\"\n        onChange={ handleChange }\n        value={ values.LastName }\n        validators={ [\n          { check: Validators.required, message: \"Last Name cannot be empty.\" }\n        ] }\n      />\n      <InputField\n        type=\"email\"\n        id=\"EmailAddress\"\n        name=\"Email Address\"\n        label=\"Email Address\"\n        onChange={ handleChange }\n        value={ values.EmailAddress }\n        validators={ [\n          { check: Validators.required, message: \"Email Address cannot be empty.\" },\n          { check: Validators.email, message: \"Looks like this is not an email.\" }\n        ] }\n      />\n      <InputField\n        type=\"password\"\n        id=\"Password\"\n        name=\"Password\"\n        label=\"Password\"\n        onChange={ handleChange }\n        value={ values.Password }\n        validators={ [\n          { check: Validators.required, message: \"Password cannot be empty.\" }\n        ] }\n      />\n      <button type=\"submit\" className=\"button -submit -bold -uppercase\">Claim your free trial</button>\n      <small className=\"small -semiBold\">By clicking the button, you are agreeing to our <a href=\"\" className=\"link -bold\">Terms and Services</a></small>\n    </form >\n  )\n}\n\nexport default Form","import Form from '../components/Form'\nconst Home = () => {\n  return (\n    <>\n      <section className=\"hero-section\">\n        <header className=\"header\">\n          <h1 className=\"title -bold\">Learn to code by watching others</h1>\n          <p className=\"lead -semiBold\">See how experienced developers solve problems in real-time. Watching scripted tutorials is great,\n            but understanding how developers think is invaluable. </p>\n        </header>\n        <div className=\"promo\">\n          <div className=\"highlight-card\">\n            <h2 className=\"title -regular\"><b className=\"-bold\">Try it free 7 days</b> then $20/mo. thereafter</h2>\n          </div>\n          <Form />\n        </div>\n      </section>\n    </>\n  )\n}\n\nexport default Home","import Home from '../views/Home'\n\nfunction App() {\n  return (\n    <Home />\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/scss/index.scss';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}